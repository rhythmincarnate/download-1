			apue
	
第一部分	io
	3  5  4  6

第二部分	并发
	多进程+信号
		7 8 9 13 10 15	
	多线程	
		11 12

第三部分	网络编程
		14 16


第三章　文件io(系统io)
	1.打开　读/写　定位  关闭
		open(2)	
			位图:用一个整型数值的每一位表达一个状态		
			文件描述符:非负整型数
				默认0~1023,当前可用最小的	
				用于标识打开的文件	

			errno全局变量 绝大多数的系统调用函数出错的时候，会设置errno值
			如果手册有说明确实设置了，那么可以使用
				perror(3)打印错误信息
			errno取值(0~133)不同的值对应不同的错误原因

			int open(const char *pathname, int flags, mode_t mode);
			flags(位图):
				O_RDONLY / O_WRONLY / O_RDWR 三者必选其一
				可选:　|
					O_CREAT:如果文件不存在则创建,给定mode,最终文件的权限
							mode & (~umask)
					O_TRUNC
							如果文件存在　内容截断为0
					O_APPEND
							追加					
		read(2)
		write(2)
		lseek(2)
		  改变文件表项中的offset
		close(2)
	2.文件共享
		重点是三张表结构的关系	
		  	进程表项　
		  	文件表项
		  	i结点表项

	3.原子操作
		当代码中某段会发生竞争关系,要求原子操作(并发)	
		如果完成的某个目标需要多条语句完成，此操作不原子
			close() + dup()
			open()--->失败---->creat()
		原子
			open(, O_CREAT)
			dup2();
		
	4.
		dup(2)/dup2(2)
			以下两条是否有区别
				./a.out > outfile 2>&1
					outfile---->fd
					dup2(fd, 1);
					dup2(1, 2);

				./a.out 2>&1 > outfile
					dup2(1, 2);
					dup2(fd, 1);

		fcntl(2):
			<1>Duplicating a file descriptor
				以下两个文件描述符的复制有区别吗
					fcntl(fd, F_DUPFD, 1);		
					dup2(fd, 1);
			<2>File descriptor flags
		 	<3>File status flags		
				以下状态不能改变
				O_CREAT,  O_EXCL, O_NOCTTY, O_TRUNC 
				O_RDONLY, O_WRONLY, O_RDWR
			<4>locking

		ioctl(2);

作业:
	1.将argv[1]对应的文件,复制到当前路径下"./hw",
	定义一个函数将"./hw"文件的第二行删除　结果写入argv[2]

	2.实现mycat,写1号文件描述符
	./mycat "/etc/passwd" > "newfile"


第五章  标准io
	跨平台
	带缓存区的
		当文件打开成功,缓存去就存在了

	1.文件流
		FILE:结构体类型
			主要<1>fd
				<2>buf
				<3>bufsize
				<4>errmsg
			
		stdin stdout stderr

		缓存区:
			行缓存	stdin stdout	
			全缓存
			无缓存	stderr
		缓存区刷新:
			1.缓存区已满	
			2.行缓存文件读到'\n'	
			3.fclose(3);
			4.fflush(3) (output streams)
			5.进程的正常终止方式中的某些情况

	2.
		fopen(3);

		字节
			getchar(3)/putchar(3);
			fgetc(3)/fputc(3);
			fgetc(stdin) ==>getchar()
			fputc(ch, stdout) ==> putchar(ch)

			feof(3) / ferror(3) --->FILE(errmsg)

		行
			gets(3) / puts(3);
			fgets(3) / fputs(3);
			getline(3);
		结构
			fread(3) / fwrite(3);
			fread(void *buf, int size, int nmemb, FILE *fp);
			size:每个成员所占字节个数 一般写1
			nmemb:最多读多少个成员

		格式化
			scanf(3)/ printf(3) 
			fscanf(3) / fprintf(3)

		fseek(3);
		ftell(3);
		rewind(3);

		fclose(3);	
	
	3.临时文件
		tmpfile(3);		

	4.比较sysio/stdio
		标准io的缓存机制就是为了减少系统调用(用户态向内核态切换次数)
	在linux操作系统:
		两种io都支持
		stdio--->libc库

		stdio							sysio
		FILE *							int fd

		fopen(3)						open(2)

	    fgetc(3)/fputc(3)
		fgets(3)/fputs(3)
		fread(3)/fwrite(3)				read(2) / write(2)
		fscanf(3)/fprintf(3)

		fseek(3)/ftell(3)/rewind(3)	    lseek(2)
		fclose(3)						close(2)

		fileno(3);
			根据FILE *获取文件描述符
		fdopen(3)	
			根据文件描述符获取FILE *

	
	作业:
		1.实现getline(3);
		2.将argv[1]文件的第argv[2]行行首插入argv[3]
		./a.out test 5 "class is over"
		3.比较argv[1]和argv[2]文件的相应行
		输出argv[1]与argv[2]不同的那几行


第四章 文件属性和目录
1.stat(2)
	fstat(2);
	lstat(2);
	-rw-rw-r-- 1 zhangzongyan zhangzongyan  817 1月  18 14:21 stat.c
	<1>文件类型
		regular
		directory
		socket
		block
		charactor
		symbol link
		pipe
		
	<2>权限
		user  group   other
		rwx
		u+s
		g+s
		o+t
		
	<3>硬链接	
		硬链接文件:
			在目录项中多了一条记录
			目录有硬链接，例如. ..
			不允许用户创建目录的硬链接
		符号链接:
			快捷方式
			存源文件路径

	<4>拥有者
		"/etc/passwd"
			读此配置文件
				getpwnam(3)
				getpwuid(3)
	<5>所属组
		"/etc/group"
			getgrnam(3);
			getgrgid(3);

	<6>字节个数
		字节个数(st_size) != 磁盘空间(st_blocks)
		st_blocks == 512byte

	<7>时间
	时间例程
		st_mtim---->struct timespec --->tv_sec(time_t)		
		--->localtime(3) struct tm--->strftime(3)

	作业ls -l	

2.读目录
	opendir(3);
	readdir(3);	
	closedir(3);

	glob(3);
		用途:
			读目录	
			存字符串	flag : GLOB_NOCHECK
			将多次调用glob(3)得到的结果存储到同一个glob_t的成员变量中, flag: GLOB_APPEND
	练习:
		du 命令	

getopt(3);
	加参
	./a.out -l -a hello -h 
	optring:
		"-la:h::"
		-a 后一定要有参数 optarg存储参数的地址
		-h 后的参数可选择 optarg == NULL 没有　　否则有参数，参数的地址optarg
		-开头　getopt(可识别非选项参数)	 返回1
		结束返回-1
		如果有optstring中不包含的选项，则返回'?'


3.密码校验过程
	//哈希
	crypt(3); ---->加密
	getpass(3); ---->读密码
	getspname(3); ---->获取用户密码


	username: zzy
	passwd: 123

	123---->crypt()加密---->比较username真正密码(/etc/shadow)

